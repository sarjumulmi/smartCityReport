<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/OMCMobileObject.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/OMCMobileObject</TokenIdentifier>
			<Abstract type="html">Class that represents an object returned by a custom code API. Enables access to strongly typed object properties.</Abstract>
			<DeclaredIn>OMCMobileObject.h</DeclaredIn>
            
			
			<NodeRef refid="38"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCMobileObject/jsonObject</TokenIdentifier>
			<Abstract type="html">The underlying JSON representation of the object, typically an NSDictionary or NSArray.</Abstract>
			<DeclaredIn>OMCMobileObject.h</DeclaredIn>
			
			<Declaration>- (_Nullable id)jsonObject</Declaration>
			
			<ReturnValue><Abstract type="html">The JSON object (returns local/offline edited copy if found; otherwise returns persistent state/server copy)</Abstract></ReturnValue>
			<Anchor>//api/name/jsonObject</Anchor>
            <NodeRef refid="38"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCMobileObject/jsonObjectPersistentState</TokenIdentifier>
			<Abstract type="html">Returns the server version (persistent state) of the object. This method is useful when the conflict resolution
policy is PRESERVE_CONFLICT and a conflict occurs. You can use this method to get the current server version of the
object, use the jsonObject method to get the device&apos;s local cache version of the object, and then resolve the
conflict programmatically. For example you can merge the two objects, or you can let user choose which version to persist.</Abstract>
			<DeclaredIn>OMCMobileObject.h</DeclaredIn>
			
			<Declaration>- (_Nullable id)jsonObjectPersistentState</Declaration>
			
			<ReturnValue><Abstract type="html">JSON object that represents the persistent state (server copy) of the object.</Abstract></ReturnValue>
			<Anchor>//api/name/jsonObjectPersistentState</Anchor>
            <NodeRef refid="38"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCMobileObject/addOrUpdateJsonProperty:propertyValue:</TokenIdentifier>
			<Abstract type="html">Adds or updates the property in the JSON object. To persist the added/updated property to the OMCMobileObject object,
you must invoke the saveResource method.</Abstract>
			<DeclaredIn>OMCMobileObject.h</DeclaredIn>
			
			<Declaration>- (void)addOrUpdateJsonProperty:(NSString *)propertyName propertyValue:(NSString *)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>propertyName</Name>
					<Abstract type="html">key cannot be nil</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">value of the property</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addOrUpdateJsonProperty:propertyValue:</Anchor>
            <NodeRef refid="38"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCMobileObject/saveResourceOnSuccess:OnError:</TokenIdentifier>
			<Abstract type="html">If the device is online, sends all the changes made to the object to the server. If the device is offline,
the behavior depends on the resource&apos;s (or for an add, the configuration file&apos;s or default) update policy.</Abstract>
			<DeclaredIn>OMCMobileObject.h</DeclaredIn>
			
			<Declaration>- (void)saveResourceOnSuccess:(OMCObjectSuccess _Nullable)successBlk OnError:(OMCSyncErrorBlock _Nullable)errorBlk</Declaration>
			<Parameters>
				<Parameter>
					<Name>successBlk</Name>
					<Abstract type="html">block that will be called after the request has successfully finished with the mobile resource.</Abstract>
				</Parameter><Parameter>
					<Name>errorBlk</Name>
					<Abstract type="html">block that will be called after the request has finished with an error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/saveResourceOnSuccess:OnError:</Anchor>
            <NodeRef refid="38"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCMobileObject/saveResource:OnSuccess:OnError:</TokenIdentifier>
			<Abstract type="html">If the device is online, sends all the changes made to the object to the server. If the device is offline,
the behavior depends on saveIfOffline parameter value.</Abstract>
			<DeclaredIn>OMCMobileObject.h</DeclaredIn>
			
			<Declaration>- (void)saveResource:(BOOL)saveIfOffline OnSuccess:(OMCObjectSuccess _Nullable)successBlk OnError:(OMCSyncErrorBlock _Nullable)errorBlk</Declaration>
			<Parameters>
				<Parameter>
					<Name>saveIfOffline</Name>
					<Abstract type="html">If the device is online, this parameter has no effect because all saves are sent
to the server. If the device is offline and this option is true, then the method caches the updates locally,
and, when the device goes online, it sends the changes to the server. If the device is offline and this option
is false, then the save fails.

Note: The use of this function overrides any update policy set elsewhere, such as the resource&apos;s update
policy for an update or delete, or the configuration file or default policy for an add. This parameter
is useful is when you must ensure that a new or updated object is sent to the server immediately, and
you need to know the results (error or success) instaneneously so that you can act on the result.</Abstract>
				</Parameter><Parameter>
					<Name>successBlk</Name>
					<Abstract type="html">Block that is called after the request completes successfully.</Abstract>
				</Parameter><Parameter>
					<Name>errorBlk</Name>
					<Abstract type="html">Block that is called after the request completes with an error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/saveResource:OnSuccess:OnError:</Anchor>
            <NodeRef refid="38"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCMobileObject/deleteResourceOnError:</TokenIdentifier>
			<Abstract type="html">  Deletes the object. Caches the deletion locally if offline.  Unlike deleteResource: with it&apos;s
  deleteIfOffline parameter, this method is always influenced by the Update Policy setting</Abstract>
			<DeclaredIn>OMCMobileObject.h</DeclaredIn>
			
			<Declaration>- (void)deleteResourceOnError:(OMCSyncErrorBlock _Nullable)errorBlk</Declaration>
			<Parameters>
				<Parameter>
					<Name>errorBlk</Name>
					<Abstract type="html">Block that is called after the request completes with error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteResourceOnError:</Anchor>
            <NodeRef refid="38"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCMobileObject/deleteResource:OnError:</TokenIdentifier>
			<Abstract type="html">Deletes the object.</Abstract>
			<DeclaredIn>OMCMobileObject.h</DeclaredIn>
			
			<Declaration>- (void)deleteResource:(BOOL)deleteIfOffline OnError:(OMCSyncErrorBlock _Nullable)errorBlk</Declaration>
			<Parameters>
				<Parameter>
					<Name>deleteIfOffline</Name>
					<Abstract type="html">If true and the device is offline, caches the deletion locally and sends the DELETE
request to the server when the device goes online. If false, then calls the errorBlk. This parameter
overrides the resource&apos;s update policy.</Abstract>
				</Parameter><Parameter>
					<Name>errorBlk</Name>
					<Abstract type="html">Block that is called after the request completes with error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteResource:OnError:</Anchor>
            <NodeRef refid="38"/>
		</Token>
		
        
        
	</File>
</Tokens>