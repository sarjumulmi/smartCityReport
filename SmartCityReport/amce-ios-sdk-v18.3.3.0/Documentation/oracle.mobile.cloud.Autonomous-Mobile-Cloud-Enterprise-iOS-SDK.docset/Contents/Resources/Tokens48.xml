<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/OMCSynchronization.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/OMCSynchronization</TokenIdentifier>
			<Abstract type="html">The main class for the Synchronization service implementation. Contains methods to make requests and manipulate the local cache.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
            
			
			<NodeRef refid="48"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/initialize</TokenIdentifier>
			<Abstract type="html">Initializes an OMCSynchronization object with the settings from the &apos;synchronization&apos; node of OMC.plist
* This method OR initializeWithMobileObjectEntities: should be the first method called on the OMCSynchronization class
* As per periodicRefreshPolicy in the &apos;synchronization&apos; node of OMC.plist, this method will check for expired resources in the cache to auto refresh in background.
* If periodicRefreshPolicy is not or set to none, this method will continue with the expired resources in cache for auto eviction based on eviction policy set for those resources.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (void)initialize</Declaration>
			
			
			<Anchor>//api/name/initialize</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/initializeWithMobileObjectEntities:</TokenIdentifier>
			<Abstract type="html">Initializes an OMCSynchronization object with the settings from the  &apos;synchronization&apos; node of OMC.plist and creates database entities for your business model or mobile objects using provided custom classes.
* This method OR the initialize method should be the first method called on the OMCSynchronization class
* As per periodicRefreshPolicy in the &apos;synchronization&apos; node of OMC.plist, this method will check for expired resources in the cache to auto refresh in the background.
* If periodicRefreshPolicy is not set or is set to none, this method will continue with the expired resources in the cache for auto eviction based on the eviction policy set for those resources.
* When calling this method again, or after initialize with the different custom classes (entities), this will purge the local cache and re-create a blank database with new custom classes/entities as the db schema.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (void)initializeWithMobileObjectEntities:(nullable NSArray *)customEntities</Declaration>
			<Parameters>
				<Parameter>
					<Name>customEntities</Name>
					<Abstract type="html">(optional) Array of custom classes derived from the OMCMobileObject class; use class properties as entity attributes for queries.
    Example array: [NSArray arrayWithObjects:[MyClass1 class], [MyClass2 class], ... , nil]</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initializeWithMobileObjectEntities:</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/openEndpoint:apiName:endpointPath:</TokenIdentifier>
			<Abstract type="html">Returns an object that provides access to an endpoint in a custom code API.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (OMCMobileEndpoint *)openEndpoint:(Class _Nullable)mobileClass apiName:(NSString *)apiName endpointPath:(NSString *)endpointPath</Declaration>
			<Parameters>
				<Parameter>
					<Name>mobileClass</Name>
					<Abstract type="html">(optional) The custom mobile object (entity) class that the custom code API exposes.
(the custom mobile object class must have been registered through initializeWithMobileObjectEntities: method. Or pass nil. )</Abstract>
				</Parameter><Parameter>
					<Name>apiName</Name>
					<Abstract type="html">The name of the custom code API.</Abstract>
				</Parameter><Parameter>
					<Name>endpointPath</Name>
					<Abstract type="html">The endpoint in the custom code API.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An MobileEndpoint object for accessing custom code.</Abstract></ReturnValue>
			<Anchor>//api/name/openEndpoint:apiName:endpointPath:</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/requestWithUri:method:syncPolicy:headers:data:onSuccess:onError:</TokenIdentifier>
			<Abstract type="html">* Request for any method; can go to server or cache, depending on policy settings.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (void)requestWithUri:(NSString *)uri method:(SyncRequestMethod)method syncPolicy:(OMCSyncPolicy *_Nullable)policy headers:(NSDictionary *_Nullable)headers data:(NSData *_Nullable)data onSuccess:(OMCSyncSuccessBlock _Nullable)success onError:(OMCSyncErrorBlock _Nullable)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>uri</Name>
					<Abstract type="html">The URI to send the request to.</Abstract>
				</Parameter><Parameter>
					<Name>method</Name>
					<Abstract type="html">RequestMethod value.</Abstract>
				</Parameter><Parameter>
					<Name>policy</Name>
					<Abstract type="html">(optional) SyncPolicy object which has all policy settings.</Abstract>
				</Parameter><Parameter>
					<Name>headers</Name>
					<Abstract type="html">(optional) NSDictionary for extra headers to support request.</Abstract>
				</Parameter><Parameter>
					<Name>data</Name>
					<Abstract type="html">(optional) NSData for http body data; can set nil for GET method.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">(optional) The block will be invoked on success of the request.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">(optional) The block will be invoked on error of the request.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestWithUri:method:syncPolicy:headers:data:onSuccess:onError:</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/synchronizePinnedResources:</TokenIdentifier>
			<Abstract type="html">* Synchronize all pinned resources.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (void)synchronizePinnedResources:(BOOL)background</Declaration>
			<Parameters>
				<Parameter>
					<Name>background</Name>
					<Abstract type="html">boolean to specify for background mode sync.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/synchronizePinnedResources:</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/loadOfflineResourcesOnSuccess:onError:</TokenIdentifier>
			<Abstract type="html">* Returns a list of all MobileResource objects that were updated offline/locally, and not yet successfully synchronized with the server.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (void)loadOfflineResourcesOnSuccess:(nullable OMCSyncMobileResourceArray)success onError:(nullable OMCSyncErrorBlock)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>success</Name>
					<Abstract type="html">(optional) The block will be invoked on success; contains NSArray of OMCMobileResource objects. (Can also be OMCMobileObject/OMCMobileFile/CustomClass)</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">(optional) The block will be invoked on error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/loadOfflineResourcesOnSuccess:onError:</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/discardOfflineUpdatesOnError:</TokenIdentifier>
			<Abstract type="html">* Discards all offline/local edits only for all the resources that are not yet successfully synchronized with server.
* Persistent state of the resources will remain in cache as is.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (void)discardOfflineUpdatesOnError:(nullable OMCSyncErrorBlock)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">(optional) The block will be invoked on error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/discardOfflineUpdatesOnError:</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/offlineResourceSynchronized:</TokenIdentifier>
			<Abstract type="html">* Event that is raised after every offline resource is synchronized with the service.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (void)offlineResourceSynchronized:(OMCSyncResourceChanged)synchronizedResource</Declaration>
			<Parameters>
				<Parameter>
					<Name>synchronizedResource</Name>
					<Abstract type="html">The block, invoked for each resource that is finished synchronizing. Pass nil to be removed from callbacks.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/offlineResourceSynchronized:</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/cachedResourceChanged:</TokenIdentifier>
			<Abstract type="html">* Event that is raised every time a cached resource is updated, either from new data from the service,
* from an online or offline write by the application, or on a delete.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (void)cachedResourceChanged:(OMCSyncResourceChanged)changedResource</Declaration>
			<Parameters>
				<Parameter>
					<Name>changedResource</Name>
					<Abstract type="html">The block invoked for each resource changed in the cache. Pass nil to be removed from callbacks.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cachedResourceChanged:</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/evictResource:onError:</TokenIdentifier>
			<Abstract type="html">* Evict (delete) the resource from the local cache.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (void)evictResource:(NSString *)uri onError:(nullable OMCSyncErrorBlock)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>uri</Name>
					<Abstract type="html">The URI of the resource.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">(optional) The block will be invoked on error of the request.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/evictResource:onError:</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/purge</TokenIdentifier>
			<Abstract type="html">Purge entire store with all files.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (void)purge</Declaration>
			
			
			<Anchor>//api/name/purge</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/cacheHitCount</TokenIdentifier>
			<Abstract type="html">Returns the number of cache hits.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (int)cacheHitCount</Declaration>
			
			<ReturnValue><Abstract type="html">The number of cache hits.</Abstract></ReturnValue>
			<Anchor>//api/name/cacheHitCount</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/cacheMissCount</TokenIdentifier>
			<Abstract type="html">Returns the number of cache misses.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (int)cacheMissCount</Declaration>
			
			<ReturnValue><Abstract type="html">The number of cache misses.</Abstract></ReturnValue>
			<Anchor>//api/name/cacheMissCount</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/setOfflineMode:</TokenIdentifier>
			<Abstract type="html">* Sets device to offline mode. Useful for testing
* Note that calling setOfflineMode:true has no effect when the device isn&apos;t connected to the internet.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (void)setOfflineMode:(BOOL)isOffline</Declaration>
			<Parameters>
				<Parameter>
					<Name>isOffline</Name>
					<Abstract type="html">boolean to set offline mode</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setOfflineMode:</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OMCSynchronization/getNetworkStatus</TokenIdentifier>
			<Abstract type="html">* Gets device network status that is currently being used by Synchronization.</Abstract>
			<DeclaredIn>OMCSynchronization.h</DeclaredIn>
			
			<Declaration>- (SyncNetworkStatus)getNetworkStatus</Declaration>
			
			<ReturnValue><Abstract type="html">SyncNetworkStatus enum</Abstract></ReturnValue>
			<Anchor>//api/name/getNetworkStatus</Anchor>
            <NodeRef refid="48"/>
		</Token>
		
        
        
	</File>
</Tokens>